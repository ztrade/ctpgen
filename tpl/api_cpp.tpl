// This file was automatically generated by ctpgen
#include "{{.Header}}"
#include "{{.include}}"
#include "{{.spiFile}}"

{{.prefix}}Spi {{.prefix}}_new_spi(uint64_t value){
  {{.spiName}}Impl *p = new {{.spiName}}Impl(value);
  return {{.prefix}}Spi(p);
}

void {{.prefix}}_spi_free({{.prefix}}Spi p){
  {{.spiName}}Impl *ptr = ({{.spiName}}Impl *)p;
  delete ptr;
}

{{range $method := .static_methods}}
{{if isSameType $method.Ret $.className}}
{{$.prefix}}Api {{cMethod $method.Name}}(
  {{- range $i,$arg := $method.Args -}}
  {{- if ne $i 0 -}}
  ,
  {{- end -}}
  {{cType $arg.Type $arg.Name}}
  {{- end -}}
){
  {{$.className}}* p = {{$.className}}::{{$method.Name}}(
  {{- range $i,$arg := $method.Args -}}
  {{- if ne $i 0 -}}
  ,
  {{- end -}}
  {{$arg.Name}}
  {{- end -}}
);
  return ({{$.prefix}}Api)p;
{{- else -}}
{{$method.Ret}} {{cMethod $method.Name}}(
  {{- range $i,$arg := $method.Args -}}
  {{- if ne $i 0 -}}
  ,
  {{- end -}}
  {{cType $arg.Type $arg.Name}}
  {{- end -}}
){
  return {{$.className}}::{{$method.Name}}(
  {{- range $i,$arg := $method.Args -}}
  {{- if ne $i 0 -}}
  ,
  {{- end -}}
  {{$arg.Name}}
  {{- end -}}
);
{{- end}}
}
{{- end}}

{{range $method := .methods}}
{{if eq $method.Name "RegisterSpi" -}}
{{$method.Ret}} {{cMethod $method.Name}}({{$.prefix}}Api a, {{$.prefix}}Spi s){
  {{$.className}}* p = ({{$.className}}*)a;
  {{$.spiName}}* spi = ({{$.spiName}}*)s;
  p->RegisterSpi(spi);
}
{{- else -}}
{{$method.Ret}} {{cMethod $method.Name}}({{$.prefix}}Api a
  {{- range $arg := $method.Args -}}
  , {{cType $arg.Type $arg.Name}}
  {{- end -}}
){
  {{$.className}}* p = ({{$.className}}*)a;
  {{if ne $method.Ret "void" -}}
  return{{" "}}
  {{- end -}}
  p->{{$method.Name}}(
  {{- range $i,$arg := $method.Args -}}
  {{- if ne $i 0 -}}
  ,
  {{- end -}}
  {{$arg.Name}}
  {{- end -}}
);
}
{{- end -}}
{{end}}