// This file was automatically generated by ctpgen
package {{.package}}

//#include "{{.include}}"
import "C"
import "unsafe"

func {{.spiName}}CValue(ptr {{.spiName}}) C.{{.prefix}}Spi{
    v := storeGoPtr(ptr)
    p := C.{{.prefix}}_new_spi(C.uint64_t(v))
    return p
}

type {{.name}} struct{
     p C.{{.prefix}}Api
     spi C.{{.prefix}}Spi
}

{{range $method := .static_methods}}
func {{goMethod $.prefix}}{{$method.Name}}(
    {{- range $i,$arg := $method.Args -}}
    {{- if ne $i 0 -}}
    ,
    {{- end -}}
    {{$arg.Name}} {{goType $arg.Type}}
    {{- end -}}
) {{goType $method.Ret}}{
    {{- range $i,$arg := $method.Args }}
    c{{$arg.Name}} := {{goToC $arg.Type}}({{$arg.Name}})
    {{- end}}
    cRet := C.{{cMethod $method.Name}}(
    {{- range $i,$arg := $method.Args -}}
    {{- if ne $i 0 -}}
    ,
    {{- end -}}
    c{{$arg.Name}}
    {{- end -}}
    )
    {{- if isSameType $method.Ret $.name}}
    ret := new({{$.name}})
    ret.p = cRet
    return ret
    {{- else}}
      {{- if ne $method.Ret "void"}}
      ret := {{cToGo $method.Ret "" "cRet"}}
      return ret
      {{- end}}
    {{- end}}
}
{{end}}

{{range $method := .methods}}
func (a *{{$.name}}){{$method.Name}}(
  {{- if isStrArray $method.Args -}}
      strs []string
  {{- else -}}
    {{- range $i,$arg := $method.Args -}}
    {{- if ne $i 0 -}}
    ,
    {{- end -}}
    {{$arg.Name}} {{goType $arg.Type}}
    {{- end -}}
  {{- end -}}
) {{goType $method.Ret}} {
  {{- if isStrArray $method.Args -}}
      cStr := go2cStrArray(strs)
      nCount := C.int(len(strs))
      defer func(){
            freeCStrArray(cStr, len(strs))
      }()
      {{if ne $method.Ret "void"}}
      ret :=
      {{- end -}}
      C.{{cMethod $method.Name}}(a.p, cStr, nCount)
  {{- else -}}
  {{- range $i,$arg := $method.Args }}
  c{{$arg.Name}} := {{goToC $arg.Type}}({{$arg.Name}})
  {{- if isNeedFree $arg.Type}}
  defer func(){
      {{freeMethod $arg.Type  "c" $arg.Name}}
  }()
  {{- end}}
  {{- end}}
  {{if ne $method.Ret "void"}}
  ret :=
  {{- end -}}
  C.{{cMethod $method.Name}}(a.p
    {{- range $i,$arg := $method.Args -}}
    , c{{$arg.Name}}
    {{- end -}}
)
  {{end}}
  {{if ne $method.Ret "void" -}}
  return {{cToGo $method.Ret "" "ret"}}
  {{- end}}
  {{- if eq $method.Name "Release" -}}
  if a.spi != nil{
    C.{{$.prefix}}_spi_free(a.spi)
    a.spi = nil
  }
  {{- else -}}
    {{- if eq $method.Name "RegisterSpi" -}}
    if a.spi != nil{
      C.{{$.prefix}}_spi_free(a.spi)
    }
    a.spi = cpSpi
    {{- end}}
  {{- end}}
}
{{end}}